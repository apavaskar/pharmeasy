package $servicePackageName

import $queryEnumPath
import $entityPath
import com.squer.platform.persistence.SearchCriteria
import com.squer.platform.persistence.repository.SquerRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

@Service
class $serviceName {

    @Autowired
    lateinit var repository: SquerRepository

    fun findById(id: String): $entityName {
        val searchCriteria = SearchCriteria($searchQuery)
        searchCriteria.addCondition("$entityId", id)
        return repository.find(searchCriteria).filterIsInstance<$entityName>().first()
    }

    fun create(entity: $entityName): $entityName {
        return repository.create(entity) as $entityName
    }

    fun update(entity: $entityName): $entityName {
        return repository.update(entity) as $entityName
    }

    fun findByParams(valueMap: Map<String,Any>): List<$entityName> {
            val searchCriteria = SearchCriteria($searchQuery)
            valueMap.forEach {
                searchCriteria.addCondition(it.key, it.value)
            }
            return repository.find(searchCriteria).filterIsInstance<$entityName>()
        }
}